version: '3.8'

services:
  # HashiCorp Vault for Secret Management
  vault:
    image: vault:1.15
    container_name: tasktracker-vault
    restart: unless-stopped
    ports:
      - "8200:8200"
    environment:
      VAULT_ADDR: 'http://0.0.0.0:8200'
      VAULT_DEV_ROOT_TOKEN_ID: 'dev-only-token'  # Only for dev mode
      VAULT_DEV_LISTEN_ADDRESS: '0.0.0.0:8200'
    cap_add:
      - IPC_LOCK
    volumes:
      - vault_data:/vault/file
      - vault_logs:/vault/logs
      - ./vault-config.hcl:/vault/config/vault.hcl:ro
    command: server
    networks:
      - tasktracker-network
    healthcheck:
      test: ["CMD", "vault", "status"]
      interval: 10s
      timeout: 5s
      retries: 5

  # MongoDB Database
  mongodb:
    image: mongo:7.0
    container_name: tasktracker-mongodb
    restart: unless-stopped
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD_FILE: /run/secrets/mongodb_password
      MONGO_INITDB_DATABASE: projecttracker
    volumes:
      - mongodb_data:/data/db
      - ../../scripts/mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js:ro
    secrets:
      - mongodb_password
    networks:
      - tasktracker-network
    depends_on:
      vault:
        condition: service_healthy

  # Redis for session storage
  redis:
    image: redis:7-alpine
    container_name: tasktracker-redis
    restart: unless-stopped
    command: /bin/sh -c "redis-server --requirepass $$(cat /run/secrets/redis_password)"
    volumes:
      - redis_data:/data
    secrets:
      - redis_password
    networks:
      - tasktracker-network
    depends_on:
      vault:
        condition: service_healthy

  # Backend API
  tasktracker-app:
    build:
      context: ../../services/backend-api
      dockerfile: Dockerfile
      target: production
    container_name: tasktracker-app
    restart: unless-stopped
    environment:
      NODE_ENV: production
      PORT: 5000
      VAULT_ADDR: http://vault:8200
      VAULT_TOKEN_FILE: /run/secrets/vault_token
      # Secrets are fetched from Vault at runtime
    volumes:
      - ../../uploads:/app/uploads
      - ../../logs:/app/logs
    secrets:
      - vault_token
      - mongodb_password
      - jwt_secret
      - session_secret
    depends_on:
      - mongodb
      - redis
      - vault
    networks:
      - tasktracker-network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.backend.rule=PathPrefix(`/api`)"
      - "traefik.http.routers.backend.entrypoints=websecure"
      - "traefik.http.routers.backend.tls.certresolver=letsencrypt"
      - "traefik.http.services.backend.loadbalancer.server.port=5000"

  # Auth Service
  tasktracker-auth:
    build:
      context: ../../services/auth-service
      dockerfile: Dockerfile
    container_name: tasktracker-auth
    restart: unless-stopped
    environment:
      NODE_ENV: production
      PORT: 4000
      VAULT_ADDR: http://vault:8200
      VAULT_TOKEN_FILE: /run/secrets/vault_token
    secrets:
      - vault_token
      - mongodb_password
      - jwt_secret
      - session_secret
    depends_on:
      - mongodb
      - vault
    networks:
      - tasktracker-network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.auth.rule=Path(`/`) || Path(`/login`)"
      - "traefik.http.routers.auth.entrypoints=websecure"
      - "traefik.http.routers.auth.tls.certresolver=letsencrypt"
      - "traefik.http.routers.auth.priority=100"
      - "traefik.http.services.auth.loadbalancer.server.port=4000"

  # Admin Client
  tasktracker-admin:
    build:
      context: ../../clients/admin
      dockerfile: Dockerfile
    container_name: tasktracker-admin
    restart: unless-stopped
    environment:
      NODE_ENV: production
      NEXT_PUBLIC_API_URL: https://projects.sapcindia.com/api
    depends_on:
      - tasktracker-app
    networks:
      - tasktracker-network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.admin.rule=PathPrefix(`/admin`)"
      - "traefik.http.routers.admin.entrypoints=websecure"
      - "traefik.http.routers.admin.tls.certresolver=letsencrypt"
      - "traefik.http.services.admin.loadbalancer.server.port=3000"

  # Engineer Client
  tasktracker-engineer:
    build:
      context: ../../clients/engineer
      dockerfile: Dockerfile
    container_name: tasktracker-engineer
    restart: unless-stopped
    environment:
      NODE_ENV: production
      NEXT_PUBLIC_API_URL: https://projects.sapcindia.com/api
    depends_on:
      - tasktracker-app
    networks:
      - tasktracker-network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.engineer.rule=PathPrefix(`/engineer`)"
      - "traefik.http.routers.engineer.entrypoints=websecure"
      - "traefik.http.routers.engineer.tls.certresolver=letsencrypt"
      - "traefik.http.services.engineer.loadbalancer.server.port=3000"

  # Traefik Reverse Proxy
  traefik:
    image: traefik:v2.10
    container_name: tasktracker-traefik
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./traefik.yml:/etc/traefik/traefik.yml:ro
      - traefik_letsencrypt:/letsencrypt
    networks:
      - tasktracker-network
    labels:
      - "traefik.enable=true"

# Docker Secrets (files mounted as /run/secrets/<secret_name>)
secrets:
  vault_token:
    file: ./secrets/vault_token
  mongodb_password:
    file: ./secrets/mongodb_password
  redis_password:
    file: ./secrets/redis_password
  jwt_secret:
    file: ./secrets/jwt_secret
  session_secret:
    file: ./secrets/session_secret

volumes:
  mongodb_data:
    driver: local
  redis_data:
    driver: local
  traefik_letsencrypt:
    driver: local
  vault_data:
    driver: local
  vault_logs:
    driver: local

networks:
  tasktracker-network:
    driver: bridge
