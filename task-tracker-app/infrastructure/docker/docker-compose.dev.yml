version: '3.8'

services:
  # MongoDB Database
  mongodb:
    image: mongo:7.0
    container_name: tasktracker-dev-mongodb
    restart: unless-stopped
    environment:
      MONGO_INITDB_DATABASE: tasktracker
    ports:
      - "27017:27017"
    volumes:
      - mongodb_dev_data:/data/db
    networks:
      - tasktracker-dev-network

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: tasktracker-dev-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_dev_data:/data
    networks:
      - tasktracker-dev-network

  # Task Tracker Application (Development)
  tasktracker-app-dev:
    build:
      context: ../../services/backend-api
      dockerfile: Dockerfile
      target: development
    container_name: tasktracker-app-dev
    restart: unless-stopped
    environment:
      NODE_ENV: development
      PORT: 5000
      MONGODB_URI: mongodb://mongodb:27017/tasktracker
      REDIS_URL: redis://redis:6379
      JWT_SECRET: dev-jwt-secret-key
      CLIENT_URL: http://localhost:3000
      SESSION_SECRET: dev-session-secret
      OTEL_ENABLED: "false"
    ports:
      - "5000:5000"
    volumes:
      - ../../services/backend-api:/app
      - /app/node_modules
      - ../../uploads:/app/uploads
    depends_on:
      - mongodb
      - redis
    networks:
      - tasktracker-dev-network
    command: npm run dev
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.backend.rule=PathPrefix(`/api`)"
      - "traefik.http.routers.backend.entrypoints=web"
      - "traefik.http.services.backend.loadbalancer.server.port=5000"
      # Backend API handles its own authentication via JWT tokens in cookies
      # No ForwardAuth middleware needed
      # Priority to ensure /api routes are handled correctly
      - "traefik.http.routers.backend.priority=1"

  # Next.js Admin Client (Development)
  tasktracker-admin-client-nextjs:
    build:
      context: ../../clients/admin
      dockerfile: Dockerfile.dev
    container_name: tasktracker-admin-nextjs-dev
    restart: unless-stopped
    environment:
      - PORT=3002
      - NEXT_PUBLIC_API_URL=/api
    ports:
      - "3002:3002"
    volumes:
      - ../../clients/admin:/app
      - /app/node_modules
      - /app/.next
    networks:
      - tasktracker-dev-network
    depends_on:
      - tasktracker-app-dev
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.admin.rule=PathPrefix(`/admin`)"
      - "traefik.http.routers.admin.entrypoints=web"
      - "traefik.http.services.admin.loadbalancer.server.port=3002"
      # ForwardAuth middleware - check token before allowing access
      - "traefik.http.routers.admin.middlewares=auth-check"
      # Next.js handles basePath internally, no stripprefix needed

  # Next.js Site Engineer Client (Development)
  tasktracker-engineer-client-nextjs:
    build:
      context: ../../clients/engineer
      dockerfile: Dockerfile.dev
    container_name: tasktracker-engineer-nextjs-dev
    restart: unless-stopped
    environment:
      - PORT=3001
      - NEXT_PUBLIC_API_URL=/api
    ports:
      - "3001:3001"
    volumes:
      - ../../clients/engineer:/app
      - /app/node_modules
      - /app/.next
    networks:
      - tasktracker-dev-network
    depends_on:
      - tasktracker-app-dev
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.engineer.rule=PathPrefix(`/engineer`)"
      - "traefik.http.routers.engineer.entrypoints=web"
      - "traefik.http.services.engineer.loadbalancer.server.port=3001"
      # ForwardAuth middleware - check token before allowing access
      - "traefik.http.routers.engineer.middlewares=auth-check"
      # Next.js handles basePath internally, no stripprefix needed

  # Authentication Service (Development)
  tasktracker-auth-dev:
    build:
      context: ../../services/auth-service
      dockerfile: Dockerfile
    container_name: tasktracker-auth-dev
    restart: unless-stopped
    environment:
      NODE_ENV: development
      PORT: 4000
      MONGODB_URI: mongodb://mongodb:27017/tasktracker
      JWT_SECRET: dev-jwt-secret-key
      OTEL_ENABLED: "false"
    volumes:
      - ../../services/auth-service:/app
      - /app/node_modules
    depends_on:
      - mongodb
    networks:
      - tasktracker-dev-network
    command: npm run dev
    labels:
      - "traefik.enable=true"
      # Auth service login page - root path (higher priority than dashboard)
      - "traefik.http.routers.auth.rule=Path(`/`)"
      - "traefik.http.routers.auth.entrypoints=web"
      - "traefik.http.routers.auth.priority=100"
      - "traefik.http.routers.auth.service=auth"
      
      # Auth service login page - /login path
      - "traefik.http.routers.auth-login.rule=Path(`/login`)"
      - "traefik.http.routers.auth-login.entrypoints=web"
      - "traefik.http.routers.auth-login.priority=100"
      - "traefik.http.routers.auth-login.service=auth"
      - "traefik.http.services.auth.loadbalancer.server.port=4000"
      
      # Auth API endpoints - only specific routes (higher priority than backend /api)
      - "traefik.http.routers.auth-api-login.rule=Path(`/api/auth/login`)"
      - "traefik.http.routers.auth-api-login.entrypoints=web"
      - "traefik.http.routers.auth-api-login.priority=15"
      - "traefik.http.routers.auth-api-login.service=auth"
      
      - "traefik.http.routers.auth-api-me.rule=Path(`/api/auth/me`)"
      - "traefik.http.routers.auth-api-me.entrypoints=web"
      - "traefik.http.routers.auth-api-me.priority=15"
      - "traefik.http.routers.auth-api-me.service=auth"
      
      - "traefik.http.routers.auth-api-forward.rule=Path(`/api/auth/forward-auth`)"
      - "traefik.http.routers.auth-api-forward.entrypoints=web"
      - "traefik.http.routers.auth-api-forward.priority=15"
      - "traefik.http.routers.auth-api-forward.service=auth"

  # Traefik Reverse Proxy (Unified Gateway)
  traefik:
    image: traefik:v2.10
    container_name: tasktracker-traefik
    restart: unless-stopped
    ports:
      - "80:80"      # HTTP
      - "8080:8080"  # Traefik Dashboard
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./traefik.yml:/etc/traefik/traefik.yml:ro
    networks:
      - tasktracker-dev-network
    labels:
      - "traefik.enable=true"
      # Define ForwardAuth middleware
      - "traefik.http.middlewares.auth-check.forwardauth.address=http://tasktracker-auth-dev:4000/api/auth/forward-auth"
      - "traefik.http.middlewares.auth-check.forwardauth.authResponseHeaders=X-User-Id,X-User-Username,X-User-Role,X-User-Name"
      # If auth fails, redirect to login page
      - "traefik.http.middlewares.auth-check.forwardauth.authResponseHeadersRegex=^X-"

# Named volumes
volumes:
  mongodb_dev_data:
    driver: local
  redis_dev_data:
    driver: local

# Networks
networks:
  tasktracker-dev-network:
    driver: bridge